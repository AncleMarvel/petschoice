const config = require('./config');
const webhooks = require('./webhooks/examples');
const requestHelper = require('./helpers/request');
const firestoreHelper = require('./helpers/firestore');
const dataFormatter = require('./helpers/dataFormatter');

exports.handleProductsCreateUpdate = async (req, res) => {
  const data = config.isLocal ? webhooks.productsCreate : req.body;
  let xmls, result;

  if (!data || Object.keys(data).length === 0) {
    console.error('‚ùå[ERROR] - Bad request. No data found');
    return res.status(400).send('Bad request');
  }

  try {
    const { existingMetafield, metafieldId } = await requestHelper.getShopifyShopMetafield('wms', 'products');
    const updatedMetafield = dataFormatter.updateShopifyProductsMetafield(existingMetafield, data);
    await requestHelper.updateShopifyMetafield(updatedMetafield, metafieldId);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error updating Shopify metafield', error);
    return res.status(500).send('Internal Server Error');
  }

  try {
    xmls = dataFormatter.createXMLForProductsCreateUpdate(data);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error generating XMLS for productsCreateUpdate:', error);
    return res.status(500).send('Internal Server Error');
  }

  try {
    result = await requestHelper.sendCreateUpdateGoods(xmls);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error sending SOAP:', error);
    return res.status(500).send('Internal Server Error');
  }

  console.log('‚úÖ[SUCCESS] - CreateUpdateGood request sent successfully:', JSON.stringify(result));
  return res.status(200).send('ok');
}

exports.handleProductsDelete = async (req, res) => {
  const data = config.isLocal ? webhooks.productsDelete : req.body;
  let xmls, result, shopifyMetafield;

  if (!data || Object.keys(data).length === 0) {
    console.error('‚ùå[ERROR] - Bad request. No data found');
    return res.status(400).send('Bad request');
  }

  try {
    shopifyMetafield = await requestHelper.getShopifyShopMetafield('wms', 'products');
  } catch (error) {
    console.error('‚ùå[ERROR] - Error getting Shopify metafield:', error);
    return res.status(500).send('Internal Server Error');
  }

  try {
    xmls = dataFormatter.createXMLForProductsDelete(data, shopifyMetafield);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error generating XMLS for productsDelete:', error);
    return res.status(500).send('Internal Server Error');
  }

  try {
    result = await requestHelper.sendCreateUpdateGoods(xmls);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error sending SOAP:', error);
    return res.status(500).send('Internal Server Error');
  }

  console.log('‚úÖ[SUCCESS] - CreateUpdateGood request sent successfully:', JSON.stringify(result));
  return res.status(200).send('ok');
}

// –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–∞–ø–∏–Ω–≥–∞ (–±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏!)
// –û–±—ã—á–Ω–æ –≤—ã –∏—Ö –æ–ø–∏—à–µ—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "mappings.js".
// –û–Ω–∏ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å –æ–±—ä–µ–∫—Ç, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É WSDL (–Ω–∞ –≤—Ö–æ–¥ createUpdateOrders, undoOrder, –∏ —Ç.–ø.)
const {
  mapShopifyOrderToNovaPoshtaCreate,
  mapShopifyOrderToNovaPoshtaCancel,
  mapOrdersToGetOrdersStatus
} = require('./helpers/mappings'); // <--- –°–∞–º —Ñ–∞–π–ª –º–∞–ø–∏–Ω–≥–∞

exports.syncInventory = async (_req, res) => {
  let stocksNovaPost, stocksShopify, result;

  try {
    // 1) –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ Nova Poshta
    stocksNovaPost = await requestHelper.getStocksFromNovaPost();
  } catch (error) {
    console.error('‚ùå[ERROR] - Error getting stocks from NovaPost:', error);
    return res.status(500).send('Internal Server Error');
  }

  try {
    // 2) –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ Shopify
    stocksShopify = await requestHelper.getStocksFromShopify();
  } catch (error) {
    console.error('‚ùå[ERROR] - Error getting stocks from Shopify:', error);
    return res.status(500).send('Internal Server Error');
  }

  try {
    // 3) –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
    const { changes, logs } = dataFormatter.prepareInventoryAdjustments(stocksNovaPost, stocksShopify);

    // 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ Shopify
    result = await requestHelper.syncStocks(changes);
    console.log('üìÑ[INFO] - Inventory sync logs:', JSON.stringify(logs));
  } catch (error) {
    console.error('‚ùå[ERROR] - Error syncing stocks:', error);
    return res.status(500).send('Internal Server Error');
  }

  console.log('‚úÖ[SUCCESS] - Stocks synced successfully:', JSON.stringify(result));
  return res.status(200).send('ok');
};

exports.orderCreate = async (req, res) => {
  // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ—Ä—ë–º mock
  const data = config.isLocal ? webhooks.ordersCreate : req.body;

  if (!data || Object.keys(data).length === 0) {
    console.error('‚ùå[ERROR] - Bad request. No data found');
    return res.status(400).send('Bad request');
  }

  console.log(`üìÑ[INFO] - orderCreate called for order: ${data.name} (ID: ${data.id})`);

  let mappedArgs;
  try {
    // 1) –ú–∞–ø–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Shopify-–∑–∞–∫–∞–∑–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É NovaPoshta (CreateUpdateOrders)
    mappedArgs = mapShopifyOrderToNovaPoshtaCreate(data);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error mapping shopify order to NovaPoshta:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 2) –°–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ NovaPoshta
  try {
    const result = await requestHelper.createUpdateOrders(mappedArgs);
    console.log(`üìÑ[INFO] - NovaPoshta createUpdateOrders response for order ${data.name}:`, result);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error sending orderCreate:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 3) –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ Firestore (–ø—Ä–∏–º–µ—Ä)
  try {
    const dataToSend = {
      orderName: data.name,
      orderId: data.id,
      orderStatus: '–ù–æ–≤—ã–π'
    };
    await firestoreHelper.addToFirestore(dataToSend, `${data.id}`, 'orders');
  } catch (error) {
    console.error('‚ùå[ERROR] - Error putting order to firestore:', error);
    return res.status(500).send('Internal Server Error');
  }

  return res.status(200).send('ok');
};

exports.orderCancel = async (req, res) => {
  // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ, –±–µ—Ä—ë–º mock
  const data = config.isLocal ? webhooks.ordersCancelled : req.body;

  if (!data || Object.keys(data).length === 0) {
    console.error('‚ùå[ERROR] - Bad request. No data found');
    return res.status(400).send('Bad request');
  }

  console.log(`üìÑ[INFO] - orderCancel called for order: ${data.name} (ID: ${data.id})`);

  let mappedArgs;
  try {
    // 1) –ú–∞–ø–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Shopify-–∑–∞–∫–∞–∑–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É NovaPoshta (UndoOrder)
    mappedArgs = mapShopifyOrderToNovaPoshtaCancel(data);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error mapping shopify order to NovaPoshta for cancel:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –≤ NovaPoshta
  try {
    const result = await requestHelper.undoOrder(mappedArgs);
    console.log(`üìÑ[INFO] - NovaPoshta undoOrder response for order ${data.name}:`, result);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error sending orderCancel:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 3) –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ Firestore
  try {
    await firestoreHelper.removeFromFirestore(`${data.id}`, 'orders');
  } catch (error) {
    console.error('‚ùå[ERROR] - Error removing order from firestore:', error);
    return res.status(500).send('Internal Server Error');
  }

  return res.status(200).send('ok');
};

exports.getOrdersStatuses = async (_req, res) => {
  let openedOrders, rawOrdersStatuses, ordersStatuses, allOrdersFromFirestore;

  // 1) –ü–æ–ª—É—á–∞–µ–º "–æ—Ç–∫—Ä—ã—Ç—ã–µ" –∑–∞–∫–∞–∑—ã –∏–∑ Shopify (–Ω–∞–ø—Ä–∏–º–µ—Ä, status=OPEN)
  try {
    openedOrders = await requestHelper.getOpenedOrders();
  } catch (error) {
    console.error('‚ùå[ERROR] - Error getting opened orders:', error);
    return res.status(500).send('Internal Server Error');
  }

  if (openedOrders.length === 0) {
    console.log('üìÑ[INFO] - Received 0 opened orders');
    return res.status(200).send('ok');
  }

  // 2) –ú–∞–ø–∏–º "–æ—Ç–∫—Ä—ã—Ç—ã–µ" –∑–∞–∫–∞–∑—ã, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å getOrdersStatus –≤ NovaPoshta
  //    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Å—Å–∏–≤ ExternalNumbers, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  let mappedArgs;
  try {
    mappedArgs = mapOrdersToGetOrdersStatus(openedOrders);
  } catch (error) {
    console.error('‚ùå[ERROR] - Error mapping openedOrders to getOrdersStatus:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 3) –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ NovaPoshta
  try {
    rawOrdersStatuses = await requestHelper.getOrdersStatus(mappedArgs);
    // rawOrdersStatuses ‚Äî –æ—Ç–≤–µ—Ç –æ—Ç NovaPoshta
  } catch (error) {
    console.error('‚ùå[ERROR] - Error getting orders status:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 4) –ü—Ä–∏–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç NovaPoshta –∫ –º–∞—Å—Å–∏–≤—É { id, status, ... }
  //    (—Ç.–µ. —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º ExternalNumber -> shopifyOrderId)
  try {
    ordersStatuses = dataFormatter.formatOrdersStatuses(rawOrdersStatuses);
    // –ò–ª–∏ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è mapOrdersStatusFromNovaPoshtaToShopify(...)
  } catch (error) {
    console.error('‚ùå[ERROR] - Error formatting orders statuses:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 5) –ë–µ—Ä—ë–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –∏–∑ Firestore
  try {
    allOrdersFromFirestore = await firestoreHelper.getAllDocuments('orders');
  } catch (error) {
    console.error('‚ùå[ERROR] - Error getting orders from firestore:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 6) –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
  try {
    const ordersToUpdate = dataFormatter.getOrdersToUpdate(ordersStatuses, allOrdersFromFirestore);
    for (const order of ordersToUpdate) {
      try {
        await firestoreHelper.updateFirestoreItem('orders', order.orderId, order);
      } catch (error) {
        console.error(`‚ùå[ERROR] - Failed to update order in firestore ${order.orderId}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå[ERROR] - Error updating orders in firestore:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 7) –û–±–Ω–æ–≤–ª—è–µ–º metafield —Å "order_status" –≤ Shopify
  try {
    for (const order of ordersStatuses) {
      try {
        const { metafieldId } = await requestHelper.getShopifyOrderMetafield('wms', 'order_status', order.id);
        const metafield = { status: order.status };
        await requestHelper.updateShopifyMetafield(metafield, metafieldId);
        console.log('üìÑ[INFO] - Metafield updated for order:', order.id);
      } catch (error) {
        console.error(`‚ùå[ERROR] - Failed to update shopify metafield. Order: ${order.id}`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå[ERROR] - Error updating orders in shopify metafield:', error);
    return res.status(500).send('Internal Server Error');
  }

  // 8) –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ Shopify (fulfillment/cancel)
  try {
    for (const order of ordersStatuses) {
      try {
        const result = await requestHelper.updateOrderStatus(order);
        if (result) {
          console.log('üìÑ[INFO] - Order status updated in Shopify, result:', JSON.stringify(result));
        }
      } catch (error) {
        console.error(`‚ùå[ERROR] - Error updating order status in Shopify. Order Id: ${order.id}`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå[ERROR] - Error updating orders status in shopify:', error);
    return res.status(500).send('Internal Server Error');
  }

  console.log('‚úÖ[SUCCESS] - Done');
  return res.status(200).send('ok');
};
